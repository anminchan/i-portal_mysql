/*-- 시퀀스 테이블 생성*/
CREATE TABLE T_SEQUENCE (
	SEQNAME VARCHAR(255) NOT NULL COMMENT '시퀀스명',
	CURRVAL BIGINT NOT NULL COMMENT '시퀀스번호',
	PRIMARY KEY (SEQNAME)
);

/*-- NEXTVAL FUNCTION 생성 (다음 시퀀스값 조회)*/
DELIMITER $$
	CREATE FUNCTION NEXTVAL(SEQ_NAME VARCHAR(255))
		RETURNS BIGINT(20)
		BEGIN
			DECLARE CURR_VAL BIGINT(20);
			
			SELECT CURRVAL 
			INTO CURR_VAL 
			FROM T_SEQUENCE
			WHERE SEQNAME = SEQ_NAME;
		
		IF CURR_VAL IS NOT NULL THEN
			UPDATE T_SEQUENCE SET
				CURRVAL = CURRVAL+1
			WHERE SEQNAME = SEQ_NAME;
			
			SELECT CURRVAL 
			INTO CURR_VAL 
			FROM T_SEQUENCE
			WHERE SEQNAME = SEQ_NAME;
		END IF;
		RETURN CURR_VAL;
	END $$
DELIMITER ;

/*-- CURRVAL FUNCTION 생성 (현재 시퀀스값 조회)*/
DELIMITER $$
	CREATE FUNCTION CURRVAL(SEQ_NAME VARCHAR(255))
		RETURNS BIGINT(20)
		BEGIN
			DECLARE CURR_VAL BIGINT(20);
			
			SELECT CURRVAL 
			INTO CURR_VAL 
			FROM T_SEQUENCE
			WHERE SEQNAME = SEQ_NAME;
			
			RETURN CURR_VAL;
	END $$
DELIMITER ;

/*-- 사용 예 : INSERT INTO T_TITLE (TITLEID)VALUES(SELECT NEXTVAL("SEQT_TITLETITLEID"));*/
/*-- 사용 예 : SELECT CURRVAL("SEQT_TITLETITLEID") FROM DUAL;*/

/*-- 시퀀스 데이타 INSERT*/
INSERT INTO T_SEQUENCE VALUES ('SEQT_ATTACHFILEATTACHFILEID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_BANNERBANNERID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_BOARDBOARDID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_CHANGELOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_CONNECTLOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_FILESHITLOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_HISTORYNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_IMAGEPOOLIMAGEPOOLID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_LINKLINKID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_LOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_MAGAZINEMAGAZINEID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_MENUMENUID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_NEWSLETTERNEWSLETTERID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_POPUPPOPUPID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_POPUPZONEPOPUPZONEID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_REPLYREPLYID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_ROLEROLEID', 500);
INSERT INTO T_SEQUENCE VALUES ('SEQT_SITELINKSITELINKID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_SITEMENUHITLOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_SITESITEID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_SURVEYSURVEYID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_TITLEHITLOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_TITLETITLEID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_TRANSTRANSID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_USERGRADEUSERGRADEID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_USERINFOLOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_USERLOGINOUTLOGNO', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_VISUALZONEVISUALZONEID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_DOODLESDOODLESID', 0);
INSERT INTO T_SEQUENCE VALUES ('SEQT_PERSONALINFOPERSONALINFOID', 0);



DELIMITER $$
CREATE FUNCTION `FUNMENUNAME`(PvInMenuID VARCHAR(255)) RETURNS varchar(255) CHARSET utf8
BEGIN
	DECLARE PvOutResult VARCHAR(255);
    
	SELECT KNAME
    INTO PvOutResult
    FROM T_MENU
    WHERE MENUID = PvInMenuID;

    RETURN(TRIM(PvOutResult));
    
END $$
DELIMITER ;


DELIMITER $$
CREATE FUNCTION `FUNSITENAME`(PvInString VARCHAR(255)) RETURNS varchar(255) CHARSET utf8
BEGIN
	DECLARE PvOutResult VARCHAR(255);
    
    SELECT KNAME
    INTO PvOutResult
    FROM T_SITE
    WHERE SITEID = PvInString;

    RETURN(TRIM(PvOutResult));
    
END $$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `FUNUSERNAME`(PvInUserID VARCHAR(255)) RETURNS varchar(255) CHARSET utf8
BEGIN
	DECLARE PvOutResult VARCHAR(255);
    
    SELECT IF(A.KIND = 'C', B.CHARGENAME, A.KNAME)
    INTO    PvOutResult
    FROM T_USER A
    LEFT JOIN T_COMPANYUSER B
    ON A.USERID = B.USERID
    WHERE A.USERID = PvInUserID;

    RETURN(TRIM(PvOutResult));
    
END $$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `FUNPARSING`(InString VARCHAR(1024), InSplitmark VARCHAR(8), InLocation INTEGER, InCount INTEGER) RETURNS varchar(256) CHARSET utf8
BEGIN

	DECLARE PvInString VARCHAR(1024);
	DECLARE PvInSplitMark VARCHAR(8);
	DECLARE PiInLocation INTEGER;
	DECLARE PiInCount INTEGER;
	DECLARE PvOutResult VARCHAR(1024);
    
	SET PvInString = TRIM(InString);
    SET PvInSplitMark = TRIM(InSplitmark);
    SET PiInLocation = InLocation;
    SET PiInCount = InCount;
    
    
    IF	PiInLocation = 0 THEN
		SET PvOutResult := SUBSTR(PvInString,1, INSTR(PvInString,PvInSplitMark)-1);

	/*ELSEIF	PiInCount < PiInLocation THEN
		SET PvOutResult := 'FAILURE : Location Value Error';

	ELSEIF	PiInCount = PiInLocation THEN
		SET PvOutResult := SUBSTR(PvInString, INSTR(PvInString,PvInSplitMark,1,PiInLocation)+1,LENGTH(PvInString)- INSTR(PvInString,PvInSplitMark,1,PiInLocation));

	ELSE
		SET PvOutResult := SUBSTR(PvInString, INSTR(PvInString,PvInSplitMark,1,PiInLocation)+1, INSTR(PvInString,PvInSplitMark,1,PiInLocation+1)-1- INSTR(PvInString,PvInSplitMark,1,PiInLocation));*/

	END IF;

	RETURN(TRIM(PvOutResult));
    
        
END $$
DELIMITER ;



DELIMITER $$
CREATE FUNCTION `FN_MENUTREE`(VAL VARCHAR(128), PSITEID VARCHAR(128)) RETURNS varchar(256) CHARSET utf8
BEGIN

    DECLARE _id VARCHAR(256);
    DECLARE _parent VARCHAR(256);
    DECLARE _sort INT;
    DECLARE _sortcount INT;
    DECLARE _higherid VARCHAR(256);
	DECLARE _samemaxid VARCHAR(256);
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET @id = NULL;
 
    /*입력 받은 ID값*/
    SET _parent = @id;
    SET _id = 'MENU00000';
    SET _sort = 0;
    SET _sortcount = 0;
    SET _higherid = '';

    /*ID가 없을 경우 재귀쿼리를 실행하지 않는다*/
    IF @id IS NULL THEN
        RETURN NULL;
    END IF;
 
    /*반복문 시작*/
    LOOP
        
        /*같은 SORT체크*/
        SELECT COUNT(*)
        INTO _sortcount 
        FROM (SELECT * FROM T_MENU WHERE SITEID = PSITEID AND STATE = 'T') a
        WHERE a.HIGHERID = _parent
        AND a.SORT = _sort;

		IF _sortcount > 1 THEN
			SELECT MAX(MENUID)
			INTO _samemaxid 
			FROM (SELECT * FROM T_MENU WHERE SITEID = PSITEID AND STATE = 'T') a
			WHERE a.HIGHERID = _parent
			AND a.SORT = _sort
			ORDER BY MENUID DESC;
		END IF;
        
		IF _sortcount > 1 AND _id != _samemaxid THEN

			SELECT a.MENUID
			INTO @id
			FROM (SELECT * FROM T_MENU WHERE SITEID = PSITEID AND STATE = 'T') a
			WHERE a.HIGHERID = _parent
			AND a.SORT = _sort
			AND a.MENUID > _id
			ORDER BY a.SORT
			LIMIT 1;  

		ELSE

			SELECT a.MENUID
			INTO @id
			FROM (SELECT * FROM T_MENU WHERE SITEID = PSITEID AND STATE = 'T') a
			WHERE a.HIGHERID = _parent
			AND a.SORT > _sort
			ORDER BY a.SORT
			LIMIT 1;  
			
		END IF;

        IF @id IS NOT NULL OR _parent = @start_with THEN
			SET @level = @level + 1;
			RETURN @id;
        END IF;

        SET @level := @level - 1;

        SELECT MENUID, HIGHERID, SORT
        INTO _id, _parent, _sort
        FROM T_MENU
        WHERE SITEID = PSITEID
        AND STATE = 'T'
        AND MENUID = _parent;
        
    END LOOP;
    
END $$
DELIMITER ;



DELIMITER $$
CREATE FUNCTION `FN_HIGHERMENUID`(menuidparam varchar(128)) RETURNS varchar(64) CHARSET utf8
BEGIN

DECLARE _parent varchar(128);
SET _parent = null;

SELECT A._ID 
INTO _parent
FROM(
SELECT @r AS _ID, (SELECT @r := HIGHERID FROM T_MENU WHERE MENUID = _ID AND STATE = 'T') AS _PARENT_ID
FROM (SELECT @r := menuidparam) AS vars, (SELECT * FROM T_MENU WHERE SUBSTRING(MENUID, 5, 5) <= SUBSTRING(menuidparam, 5, 5)) AS h
WHERE @r <> '-'
) A
WHERE A._PARENT_ID = '-';

RETURN _parent;
 
END $$
DELIMITER ;




DELIMITER $$
CREATE FUNCTION `FN_MENUIDPATH`(InVAL VARCHAR(128), InMark VARCHAR(16)) RETURNS varchar(512) CHARSET utf8
BEGIN
    DECLARE _cnt INT;
    DECLARE _path VARCHAR(512);
    DECLARE _parent VARCHAR(128);
    DECLARE _idTmp VARCHAR(128);
    SET _parent = InVAL;
    SET _path = '';
    SET _cnt = 0;
    
    loop_menu:LOOP
                SET _cnt = _cnt+1;

		IF _parent = '-' THEN
			LEAVE loop_menu;
		ELSE
			SELECT A.MENUID
			INTO _idTmp
			FROM (SELECT MENUID
				  FROM T_MENU
				  WHERE MENUID = _parent
                  AND STATE = 'T'
				  LIMIT 0, 1)A;
						   
			SET _path = CONCAT(_idTmp, IF(_path = '', '', InMark), _path);
		END IF;
				   
		SELECT A.HIGHERID
		INTO _parent
		FROM (SELECT HIGHERID
			  FROM T_MENU
			  WHERE MENUID = _idTmp
              AND STATE = 'T'
			  LIMIT 0, 1)A;
        
              IF _cnt > 10 THEN
                LEAVE loop_menu;
              END IF;

	END LOOP;
    
    RETURN _path;
	
END $$
DELIMITER ;



DELIMITER $$
CREATE FUNCTION `FN_MENUNAMEPATH`(InVAL VARCHAR(128), InMark VARCHAR(16)) RETURNS varchar(512) CHARSET utf8
BEGIN
    DECLARE _cnt INT;
    DECLARE _path VARCHAR(512);
    DECLARE _parent VARCHAR(128);
    DECLARE _idTmp VARCHAR(128);
    DECLARE _nameTmp VARCHAR(128);
    SET _parent = InVAL;
    SET _path = '';
    SET _cnt = 0;
        
    loop_menu:LOOP
                SET _cnt = _cnt+1;
		IF _parent = '-' THEN
			LEAVE loop_menu;
		ELSE
			SELECT A.MENUID, A.KNAME
			INTO _idTmp, _nameTmp
			FROM (SELECT MENUID, KNAME
				  FROM T_MENU
				  WHERE MENUID = _parent
                  AND STATE = 'T'
				  LIMIT 0, 1)A;
						   
			SET _path = CONCAT(_nameTmp, IF(_path = '', '', InMark), _path);
		END IF;
				   
		SELECT A.HIGHERID
		INTO _parent
		FROM (SELECT HIGHERID
			  FROM T_MENU
			  WHERE MENUID = _idTmp
              AND STATE = 'T'
			  LIMIT 0, 1)A;
              
              IF _cnt > 10 THEN
                LEAVE loop_menu;
              END IF;

	END LOOP;
    
    RETURN _path;
	
END $$
DELIMITER ;


DELIMITER $$
CREATE FUNCTION `FUNCODENAME`(PvInCode VARCHAR(255), PvInHigherCode VARCHAR(255)) RETURNS varchar(255) CHARSET utf8
BEGIN
	DECLARE PvOutResult VARCHAR(255);
        
    SELECT KNAME
	INTO PvOutResult
	FROM T_CODE
	WHERE CODE = PvInCode
	AND HIGHERCODE = PvInHigherCode;

    RETURN(TRIM(PvOutResult));
    
END $$
DELIMITER ;






DELIMITER $$
CREATE PROCEDURE `FILESHITLOG`(

	 InTitleID              INTEGER,
     InFileID               INTEGER,
     InUserFileName         VARCHAR(256),
     InSystemFileName       VARCHAR(256),
     InFileGubun            VARCHAR(16),
     InMenuID               VARCHAR(64),
     InExecMenuID           VARCHAR(64),
     InDMLUserID            VARCHAR(64),
     InDMLIP                VARCHAR(64)
     
)
BEGIN
	
    DECLARE PiSQLRowCount INTEGER;
	SET PiSQLRowCount = 0;
    
    IF (InTitleID != '' OR InTitleID IS NOT NULL) AND (InFileID != '' OR InFileID IS NOT NULL) THEN

           SELECT COUNT(*)
            INTO PiSQLRowCount
            FROM T_FILESHITLOG
            WHERE HITDATE = DATE_FORMAT(NOW(),'%Y%m%d')
            AND TITLEID = InTitleID
            AND FILEID = InFileID
            AND USERFILENAME = InUserFileName
            AND SYSTEMFILENAME = InSystemFileName;

            IF PiSQLRowCount = 0 THEN

                INSERT INTO T_FILESHITLOG
                (   NO, HITDATE, TITLEID, HITCOUNT, FILEID, USERFILENAME, SYSTEMFILENAME, FILEGUBUN, MENUID, EXECMENUID,
                    DMLUSERID, DMLIP, DMLTIME)
                VALUES
                (   NEXTVAL('SEQT_FILESHITLOGNO'), DATE_FORMAT(NOW(),'%Y%m%d'), InTitleID, 1, InFileID, InUserFileName, InSystemFileName, InFileGubun, InMenuID, InExecMenuID,
                    InDMLUserID, InDMLIP, NOW());

            ELSE

                UPDATE T_FILESHITLOG
                SET HITCOUNT = HITCOUNT + 1, DMLUSERID = InDMLUserID, DMLIP = InDMLIP, DMLTIME = SYSDATE
                WHERE HITDATE = DATE_FORMAT(NOW(),'%Y%m%d')
                AND TITLEID = InTitleID
                AND FILEID = InFileID
                AND USERFILENAME = InUserFileName
                AND SYSTEMFILENAME = InSystemFileName;

            END IF;
            
    ELSEIF (InTitleID != '' OR InTitleID IS NOT NULL) AND (InFileID = '' OR InFileID IS NULL) THEN

          SELECT COUNT(*)
            INTO PiSQLRowCount
            FROM T_FILESHITLOG
            WHERE HITDATE = DATE_FORMAT(NOW(),'%Y%m%d')
            AND TITLEID = InTitleID
            AND USERFILENAME = InUserFileName
            AND SYSTEMFILENAME = InSystemFileName;

            IF PiSQLRowCount = 0 THEN

                INSERT INTO T_FILESHITLOG
                (   NO, HITDATE, TITLEID, HITCOUNT, FILEID, USERFILENAME, SYSTEMFILENAME, FILEGUBUN, MENUID, EXECMENUID,
                    DMLUSERID, DMLIP, DMLTIME)
                VALUES
                (   NEXTVAL('SEQT_FILESHITLOGNO'), DATE_FORMAT(NOW(),'%Y%m%d'), InTitleID, 1, InFileID, InUserFileName, InSystemFileName, InFileGubun, InMenuID, InExecMenuID,
                    InDMLUserID, InDMLIP, NOW());

            ELSE

                UPDATE T_FILESHITLOG
                SET HITCOUNT = HITCOUNT + 1, DMLUSERID = InDMLUserID, DMLIP = InDMLIP, DMLTIME = SYSDATE
                WHERE HITDATE = DATE_FORMAT(NOW(),'%Y%m%d')
                AND TITLEID = InTitleID
                AND USERFILENAME = InUserFileName
                AND SYSTEMFILENAME = InSystemFileName;

            END IF;

    ELSE

            SELECT COUNT(*)
            INTO PiSQLRowCount
            FROM T_FILESHITLOG
            WHERE HITDATE = DATE_FORMAT(NOW(),'%Y%m%d')
            AND FILEGUBUN = InFileGubun
            AND MENUID = InMenuID
            AND USERFILENAME = InUserFileName
            AND SYSTEMFILENAME = InSystemFileName;

            IF PiSQLRowCount = 0 THEN

                INSERT INTO T_FILESHITLOG
                (   NO, HITDATE, TITLEID, HITCOUNT, FILEID, USERFILENAME, SYSTEMFILENAME, FILEGUBUN, MENUID, EXECMENUID,
                    DMLUSERID, DMLIP, DMLTIME)
                VALUES
                (   SeqT_FILESHITLOGNo.NEXTVAL, DATE_FORMAT(NOW(),'%Y%m%d'), InTitleID, 1, InFileID, InUserFileName, InSystemFileName, InFileGubun, InMenuID, InExecMenuID,
                    InDMLUserID, InDMLIP, NOW());

            ELSE

                UPDATE T_FILESHITLOG
                SET HITCOUNT = HITCOUNT + 1, DMLUSERID = InDMLUserID, DMLIP = InDMLIP, DMLTIME = SYSDATE
                WHERE HITDATE = DATE_FORMAT(NOW(),'%Y%m%d')
                AND FILEGUBUN = InFileGubun
                AND MENUID = InMenuID
                AND USERFILENAME = InUserFileName
                AND SYSTEMFILENAME = InSystemFileName;

            END IF;
    END IF;

END $$
DELIMITER ;




DELIMITER $$
CREATE  PROCEDURE `TITLEHITLOG`(

	 InLinkID INTEGER,
     InDMLUserID VARCHAR(128),
     InDMLIP VARCHAR(128)

)
BEGIN
	      
	DECLARE PiSQLRowCount INTEGER;
	SET PiSQLRowCount = 0;
	
	SELECT COUNT(*)
	INTO PiSQLRowCount
	FROM T_TITLEHITLOG
	WHERE HITDATE = DATE_FORMAT(NOW(), '%Y%m%d')
	AND LINKID = InLinkID
	AND DMLUSERID = InDMLUserID;
	
	IF PiSQLRowCount = 0 THEN
		INSERT INTO T_TITLEHITLOG
		(   NO, HITDATE, LINKID, HITCOUNT,
			DMLUSERID, DMLIP, DMLTIME)
		VALUES
		(   NEXTVAL('SEQT_TITLEHITLOGNO'), DATE_FORMAT(NOW(),'%Y%m%d'), InLinkID, 1,
			InDMLUserID, InDMLIP, NOW());
	ELSE
		UPDATE T_TITLEHITLOG
		SET HITCOUNT = HITCOUNT + 1, DMLTIME = NOW()
		WHERE HITDATE = DATE_FORMAT(NOW(),'%Y%m%d')
		AND LINKID = InLinkID
		AND DMLUSERID = InDMLUserID;
	
	END IF;

        COMMIT;
END $$
DELIMITER ;





DELIMITER $$
CREATE PROCEDURE `TITLEHITLOG_MONTH`()
BEGIN
    DELETE FROM T_TITLEHITLOG_MONTH WHERE  DATE_FORMAT(DMLTIME,'%Y-%m-%d')  < DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d');
    
    INSERT INTO T_TITLEHITLOG_MONTH
    SELECT * FROM T_TITLEHITLOG
    WHERE DMLTIME >= DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d'); 

    COMMIT;
END $$
DELIMITER ;






DELIMITER $$
CREATE PROCEDURE `TITLEHITLOG_WEEK`()
BEGIN
    DELETE FROM T_TITLEHITLOG_WEEK;

    INSERT INTO T_TITLEHITLOG_WEEK
    SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y%m%d') AS HITDATE,LINKID,HITCOUNT FROM (
        SELECT LINKID,SUM(HITCOUNT) AS HITCOUNT FROM T_TITLEHITLOG
        WHERE HITDATE BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -7 DAY),'%Y-%m-%d') AND DATE_FORMAT(NOW(),'%Y-%m-%d') 
        GROUP BY LINKID
    ) A;

    COMMIT;
END $$
DELIMITER ;




DELIMITER $$

CREATE PROCEDURE `CONNECTLOG_DAY`()
    READS SQL DATA
BEGIN
    INSERT INTO T_CONNECTLOG_DAY
    SELECT SITEID,CONNECTDATE,MODULE,CONNUSER,SUM(CNT) AS TOTAL FROM (
                    SELECT DATE_FORMAT(CONNECTTIME, '%Y-%m-%d') AS CONNECTDATE,SITEID,MODULE,'USER' AS CONNUSER, 1 AS CNT
                    FROM T_CONNECTLOG
                    WHERE CONNECTTIME BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d') AND DATE_FORMAT(NOW(), '%Y-%m-%d') AND USERID <> 'guest'
                    UNION ALL
                    SELECT DATE_FORMAT(CONNECTTIME, '%Y-%m-%d') AS CONNECTDATE,SITEID,MODULE,'GUEST' AS CONNUSER, 1 AS CNT
                    FROM T_CONNECTLOG
                    WHERE CONNECTTIME BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d') AND DATE_FORMAT(NOW(), '%Y-%m-%d') AND USERID = 'guest'
            ) A GROUP BY CONNECTDATE,SITEID,MODULE,CONNUSER;
    COMMIT;
END $$
DELIMITER ;


DELIMITER $$

CREATE PROCEDURE `CONNECTLOG_MENU`()
    READS SQL DATA
BEGIN
    INSERT INTO T_CONNECTLOG_MENU
    SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d') AS TIME,SITEID,MENUID,SUM(CNT) AS TOTAL FROM (
                SELECT SITEID,MENUID,1 AS CNT
                FROM T_CONNECTLOG
                WHERE CONNECTTIME BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d') AND DATE_FORMAT(NOW(), '%Y-%m-%d')
    ) A GROUP BY SITEID,MENUID;

    COMMIT;
END $$
DELIMITER ;



DELIMITER $$

CREATE PROCEDURE `CONNECTLOG_TIME`()
    READS SQL DATA
BEGIN
  
INSERT INTO T_CONNECTLOG_TIME
	SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d') AS TIME,SITEID,CONNECTDATE,CONNUSER,SUM(CNT) AS TOTAL FROM (
            SELECT SITEID,CASE WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '00:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '01:00' THEN '00:00 ~ 01:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '01:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '02:00' THEN '01:00 ~ 02:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '02:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '03:00' THEN '02:00 ~ 03:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '03:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '04:00' THEN '03:00 ~ 04:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '04:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '05:00' THEN '04:00 ~ 05:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '05:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '06:00' THEN '05:00 ~ 06:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '06:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '07:00' THEN '06:00 ~ 07:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '07:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '08:00' THEN '07:00 ~ 08:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '08:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '09:00' THEN '08:00 ~ 09:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '09:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '10:00' THEN '09:00 ~ 10:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '10:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '11:00' THEN '10:00 ~ 11:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '11:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '12:00' THEN '11:00 ~ 12:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '12:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '13:00' THEN '12:00 ~ 13:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '13:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '14:00' THEN '13:00 ~ 14:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '14:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '15:00' THEN '14:00 ~ 15:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '15:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '16:00' THEN '15:00 ~ 16:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '16:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '17:00' THEN '16:00 ~ 17:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '17:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '18:00' THEN '17:00 ~ 18:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '18:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '19:00' THEN '18:00 ~ 19:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '19:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '20:00' THEN '19:00 ~ 20:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '20:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '21:00' THEN '20:00 ~ 21:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '21:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '22:00' THEN '21:00 ~ 22:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '22:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '23:00' THEN '22:00 ~ 23:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '23:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '24:00' THEN '23:00 ~ 24:00' END AS CONNECTDATE,
                        'USER' AS CONNUSER,
                   1 AS CNT
            FROM T_CONNECTLOG
            WHERE CONNECTTIME BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d') AND DATE_FORMAT(NOW(), '%Y-%m-%d') AND USERID <> 'guest' AND MODULE IS NOT NULL
            UNION ALL
            SELECT SITEID,CASE WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '00:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '01:00' THEN '00:00 ~ 01:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '01:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '02:00' THEN '01:00 ~ 02:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '02:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '03:00' THEN '02:00 ~ 03:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '03:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '04:00' THEN '03:00 ~ 04:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '04:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '05:00' THEN '04:00 ~ 05:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '05:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '06:00' THEN '05:00 ~ 06:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '06:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '07:00' THEN '06:00 ~ 07:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '07:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '08:00' THEN '07:00 ~ 08:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '08:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '09:00' THEN '08:00 ~ 09:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '09:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '10:00' THEN '09:00 ~ 10:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '10:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '11:00' THEN '10:00 ~ 11:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '11:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '12:00' THEN '11:00 ~ 12:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '12:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '13:00' THEN '12:00 ~ 13:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '13:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '14:00' THEN '13:00 ~ 14:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '14:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '15:00' THEN '14:00 ~ 15:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '15:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '16:00' THEN '15:00 ~ 16:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '16:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '17:00' THEN '16:00 ~ 17:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '17:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '18:00' THEN '17:00 ~ 18:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '18:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '19:00' THEN '18:00 ~ 19:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '19:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '20:00' THEN '19:00 ~ 20:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '20:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '21:00' THEN '20:00 ~ 21:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '21:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '22:00' THEN '21:00 ~ 22:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '22:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '23:00' THEN '22:00 ~ 23:00'
                        WHEN DATE_FORMAT(CONNECTTIME, '%H:%m') >= '23:00' AND DATE_FORMAT(CONNECTTIME, '%H:%m') < '24:00' THEN '23:00 ~ 24:00' END AS CONNECTDATE,
                        'GUEST' AS CONNUSER,
                   1 AS CNT
            FROM T_CONNECTLOG
            WHERE CONNECTTIME BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 DAY),'%Y-%m-%d') AND DATE_FORMAT(NOW(), '%Y-%m-%d') AND USERID = 'guest' AND MODULE IS NOT NULL
	) A GROUP BY CONNECTDATE,SITEID,CONNUSER;

        COMMIT;

END $$
DELIMITER ;


DELIMITER $$

CREATE PROCEDURE `LOG_DEL`()
    READS SQL DATA
BEGIN
                
	DELETE FROM T_CONNECTLOG
    WHERE CONNECTTIME < DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 MONTH),'%Y-%m-%d');
            
    DELETE FROM T_TITLEHITLOG
	WHERE HITDATE < DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 MONTH),'%Y-%m-%d');

    DELETE FROM T_FILESHITLOG
	WHERE HITDATE < DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 MONTH),'%Y-%m-%d');

    COMMIT;
END $$
DELIMITER ;





--SELECT * FROM information_schema.EVENTS


CREATE EVENT IF NOT EXISTS E1
ON SCHEDULE 
EVERY 1 WEEK 
STARTS '[yyyy-mm-dd] 00:01:00' 
DO CALL TITLEHITLOG_WEEK();

CREATE EVENT IF NOT EXISTS E2
ON SCHEDULE 
EVERY 1 MONTH 
STARTS '[yyyy-mm-dd] 00:05:00' 
DO CALL TITLEHITLOG_MONTH();

CREATE EVENT IF NOT EXISTS E3
ON SCHEDULE 
EVERY 1 DAY 
STARTS '[yyyy-mm-dd] 00:10:00' 
DO CALL CONNECTLOG_DAY();

CREATE EVENT IF NOT EXISTS E4
ON SCHEDULE 
EVERY 1 DAY
STARTS '[yyyy-mm-dd] 00:15:00' 
DO CALL CONNECTLOG_MENU();

CREATE EVENT IF NOT EXISTS E5
ON SCHEDULE 
EVERY 1 DAY 
STARTS '[yyyy-mm-dd] 00:20:00' 
DO CALL CONNECTLOG_TIME();


/*
CREATE EVENT IF NOT EXISTS E6
ON SCHEDULE 
EVERY 1 DAY 
STARTS '[yyyy-mm-dd] 00:25:00' 
DO CALL KEYWORD_DAY();

CREATE EVENT IF NOT EXISTS E7
ON SCHEDULE 
EVERY 1 DAY 
STARTS '[yyyy-mm-dd] 00:30:00' 
DO CALL SVCKEYWORDUPDATE();

CREATE EVENT IF NOT EXISTS E8
ON SCHEDULE 
EVERY 1 DAY 
STARTS '[yyyy-mm-dd] 00:40:00' 
DO CALL TOPKEYWORD_DAY();

CREATE EVENT IF NOT EXISTS E9
ON SCHEDULE 
EVERY 1 WEEK 
STARTS '[yyyy-mm-dd] 00:45:00' 
DO CALL TOPKEYWORD_WEEK();

CREATE EVENT IF NOT EXISTS E10
ON SCHEDULE 
EVERY 1 MONTH 
STARTS '[yyyy-mm-dd] 00:50:00' 
DO CALL TOPKEYWORD_MONTH();

CREATE EVENT IF NOT EXISTS E11
ON SCHEDULE 
EVERY 1 YEAR 
STARTS '[yyyy-mm-dd] 00:55:00' 
DO CALL TOPKEYWORD_YEAR();

CREATE EVENT IF NOT EXISTS E12
ON SCHEDULE 
EVERY 1 DAY 
STARTS '[yyyy-mm-dd] 01:00:00' 
DO CALL LOG_DEL();

*/

